================================================================================
MERLIN: TEACH PHASES - WORKING MINI-DEMOS FOR ARTIFACT VERIFICATION
================================================================================

What are Teach Phases?
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
Teaching phases are minimal, self-contained Python scripts that demonstrate 
each subsystem phase works with REAL CODE (not mocks). Each phase:
âœ“ Runs standalone in <1 minute
âœ“ Prints expected outputs with checkmarks
âœ“ Verifies one specific concept
âœ“ Can be run before moving to next phase
âœ“ Proves confidence without full implementation

Why Teach Phases?
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
- Catch errors EARLY (within minutes, not hours)
- Build system incrementally with confidence
- Demonstrate progress to team members
- Create reproducible proof-of-concept artifacts
- Enable rapid iteration and refinement

Quick Demo: Core State Machine
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
$ python examples/teach_phase_1_types.py
âœ“ Teach Phase 1: Types work!
  Status: IDLE
  Position: [0.0, 0.0]
  Battery: 95.0%
âœ“ All assertions pass

$ python examples/teach_phase_2_mock_controller.py
âœ“ Teach Phase 2: Mock controller works!
  Distance traveled: 0.50m (expected ~0.5m)
  Position: [0.5, 0.0]
  Battery: 94.4%
âœ“ Kinematics verified

$ python examples/teach_phase_3_state_machine.py
âœ“ Teach Phase 3: State machine works!
  Starting navigation to (1.0, 0.0)...
  âœ“ Arrived at [1.0, 0.02]
âœ“ Navigation verified

$ python examples/teach_phase_4_full_mission.py
âœ“ Teach Phase 4: Full mission works!
  Mission: Navigate â†’ Grasp â†’ Navigate away â†’ Release
  âœ“ Step 1: Arrived at object
  âœ“ Step 2: Grasped object
  âœ“ Step 3: Moved to drop location
  âœ“ Step 4: Released object
âœ“ Full mission successful!

All Teach Phases (13 total)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

PHASE 1: Core State Machine (4 teach phases)
â”œâ”€ teach_phase_1_types.py            â†’ RobotStatus dataclass works
â”œâ”€ teach_phase_2_mock_controller.py  â†’ Kinematics integration works
â”œâ”€ teach_phase_3_state_machine.py    â†’ State machine dispatch works
â””â”€ teach_phase_4_full_mission.py     â†’ Full pick-and-place works
   Time: ~30 minutes total

PHASE 2: Hardware Abstraction (3 teach phases)
â”œâ”€ teach_backend_mock.py             â†’ Mock backend operations work
â”œâ”€ teach_backend_factory.py          â†’ Factory pattern works
â””â”€ teach_backend_interface.py        â†’ Backend contract enforced
   Time: ~15 minutes total

PHASE 3: MCP Server (3 teach phases)
â”œâ”€ teach_mcp_base_tool.py           â†’ MCPTool base class works
â”œâ”€ teach_mcp_tools.py               â†’ 5 core tools work
â””â”€ teach_mcp_server.py              â†’ Tool registry works
   Time: ~15 minutes total

PHASE 4: Agent Backends (3 teach phases)
â”œâ”€ teach_agent_base.py              â†’ BaseAgent interface works
â”œâ”€ teach_agent_simple.py            â†’ Simple agent logic works
â”œâ”€ teach_agent_factory.py           â†’ Agent factory works
â””â”€ teach_agent_fallback.py          â†’ Fallback chain works
   Time: ~25 minutes total

Total Validation Time: ~90 minutes

How to Use Teach Phases
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
1. Create examples/ directory
   mkdir -p examples

2. Copy each teach phase script to examples/

3. Run in sequence (they build on each other):
   python examples/teach_phase_1_types.py
   python examples/teach_phase_2_mock_controller.py
   python examples/teach_phase_3_state_machine.py
   python examples/teach_phase_4_full_mission.py
   ... and so on

4. Verify all pass with âœ“ checkmarks

5. If any fail, debug THAT PHASE before moving on

Exit Criteria Per Phase
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

Phase 1: Core State Machine
âœ… All 4 teach phases pass
âœ… Navigation accuracy < 0.3m error
âœ… Gripper state tracking 100% accurate
âœ… Battery drain is realistic

Phase 2: Hardware Abstraction
âœ… All 3 teach phases pass
âœ… Factory creates controllers instantly
âœ… Same code works with different backends
âœ… No interface violations

Phase 3: MCP Server
âœ… All 3 teach phases pass
âœ… All 5 tools implemented and working
âœ… Tools block until completion
âœ… Results are valid JSON

Phase 4: Agent Backends
âœ… All 3 teach phases pass
âœ… All agent backends implement interface
âœ… Factory switches seamlessly
âœ… Fallback chain selects working backend

Integration Flow
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
After each teach phase cluster passes, integrate with next layer:

Phase 1 âœ“ â†’ Integrate with Phase 2 (Hardware)
Phase 2 âœ“ â†’ Integrate with Phase 3 (MCP)
Phase 3 âœ“ â†’ Integrate with Phase 4 (Agent)
Phase 4 âœ“ â†’ Full working system! ðŸŽ‰

Sample Teach Phase (3-phase pattern)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

#!/usr/bin/env python3
# teach_phase_1_types.py
from dataclasses import dataclass

@dataclass
class RobotStatus:
    state: str
    position: list

# Test it
print("âœ“ Teach Phase 1: Types")
status = RobotStatus("IDLE", [0.0, 0.0])
assert status.state == "IDLE"
print("âœ“ Types verified!")

---

#!/usr/bin/env python3
# teach_phase_2_controller.py
# Uses RobotStatus from teach_phase_1
# Adds controller logic

class Controller:
    def __init__(self):
        self.position = [0.0, 0.0]
    
    def move(self):
        self.position[0] += 0.1

print("âœ“ Teach Phase 2: Controller")
c = Controller()
c.move()
assert c.position[0] > 0
print("âœ“ Controller verified!")

---

#!/usr/bin/env python3
# teach_phase_3_integration.py
# Combines RobotStatus + Controller
# Tests full workflow

class StateMachine:
    def __init__(self):
        self.controller = Controller()
        self.status = RobotStatus("IDLE", self.controller.position)

print("âœ“ Teach Phase 3: Integration")
sm = StateMachine()
sm.controller.move()
assert sm.controller.position[0] > 0
print("âœ“ Integration verified!")

Best Practices
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
âœ… Run teach phases in order
âœ… Fix each phase before proceeding
âœ… Keep scripts under 200 lines
âœ… Print checkmarks for confidence
âœ… Use assertions for validation
âœ… Minimal dependencies (mostly stdlib)
âœ… No external libraries unless necessary
âœ… Self-contained (can run standalone)

Common Issues & Fixes
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

Issue: teach_phase_1 fails with "ImportError"
Fix: Make sure all imports are available in Python stdlib

Issue: teach_phase_2 fails with "AssertionError"
Fix: Check math in kinematics (usually rounding errors)
      Relax assertions: 0.4 < distance < 0.6 (not 0.5 exactly)

Issue: teach_phase_3 fails with timeout
Fix: Increase max iterations or loosen arrival threshold

Issue: teach_phase_4 doesn't complete
Fix: Check state machine logic (IDLE transition might not trigger)

Next Steps After Teach Phases
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
1. Convert teach phases to production modules
   - Add error handling
   - Add logging
   - Add comments
   - Add type hints

2. Write integration tests
   - Test between phases
   - Test with real backends
   - Test error scenarios

3. Performance testing
   - Benchmark latencies
   - Profile bottlenecks
   - Optimize critical paths

4. System testing
   - End-to-end missions
   - Stress testing
   - Failure recovery

Where Are Teach Phases?
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
All teach phase code is embedded in the subsystem plans:
- 01_CORE_STATE_MACHINE.md Â§ 4.5
- 02_HARDWARE_ABSTRACTION.md Â§ 5.5
- 03_MCP_SERVER.md Â§ 4.5
- 04_AGENT_BACKENDS.md Â§ 5

Reference document: TEACH_PHASES.md

Success Metrics
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
âœ“ All 13 teach phases pass
âœ“ Total validation time: 90 minutes
âœ“ Confidence level: HIGH
âœ“ Zero integration surprises
âœ“ System working by hour 18

This is your proof-of-concept accelerator! ðŸš€

================================================================================
Created: October 24, 2025
Total Teach Phases: 13 mini-demos
Estimated Value: 5-10 hours of integration risk eliminated
================================================================================
